@model Housemate.Models.Admin
@{
    ViewBag.Title = "Login";
    Layout = "~/Views/Shared/AdminRegisterLogin.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>

    <style>
        .center-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 710px;
        }

        body {
            padding: 20px;
            margin: 0;
            padding: 0;
            /* Adding the background image */
            background-image: url("/img/Asset.jpg");
            /* Set background image to cover the entire body */
            background-size: cover;
            /* Set background image to not repeat */
            background-repeat: no-repeat;
            /* Apply blur effect to the background image */
            backdrop-filter: blur(5px);
        }

        .form-control,
        .btn {
            border-radius: 10px; /* Adjust the radius value as needed */
        }
    </style>
    <link rel="stylesheet" type="text/css" href="~/CSS/navbar.css" />
</head>
<body>
    <div class="container center-container">
        <h2 style="margin-top:200px">Login</h2>
        @using (Html.BeginForm("Verify", "Admins", FormMethod.Post))
        {
            <div class="form-group">
                @Html.LabelFor(m => m.username, new { @style = "text-transform: capitalize;" })
                @Html.TextBoxFor(m => m.username, new { @class = "form-control" })
                <h5 style="color:red">@Html.ValidationMessageFor(m => m.email, "", new { @class = "" })</h5>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.password, new { @style = "text-transform: capitalize;" })
                @Html.PasswordFor(m => m.password, new { @class = "form-control" })
                <h5 style="color:red">@Html.ValidationMessageFor(m => m.password, "", new { @class = "" })</h5>
            </div>
            <h5 style="color:red; text-align:center;">@ViewBag.InvalidMessage</h5>
            <button type="submit" class="btn btn-primary center-block" onclick="showLoadingAlert()">Login</button>
            <script>
                
                async function showLoadingAlert() {
                    const loadingAlert = Swal.fire({
                        title: 'Logging in',
                        html: 'Please wait while we process your request...',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    try {
                        // Simulate an asynchronous process (e.g., login request)
                        await new Promise((resolve) => setTimeout(resolve, 3000)); // Replace 3000 with the actual duration in milliseconds

                        // Close the loading alert after the simulated process is complete
                        loadingAlert.close();
                    } catch (error) {
                        console.error(error);
                    }
                }
            </script>

        }


        <div class="mt-3">
            <a href="#">Forgot Password</a>
            <span>|</span>
            <a href="#">Help</a>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
</body>
</html>



